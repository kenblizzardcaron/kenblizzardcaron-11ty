<!DOCTYPE html>
<html lang="{{ site.lang }}">
  <head>
    <meta charset="UTF-8">
    <title>{{ site.title or title }}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta content="{{ keywords }}" name="keywords">
    <meta content="{{ description }}" name="description">

    <link rel="apple-touch-icon" sizes="180x180" href="{{ '/assets/images/favicons/apple-touch-icon.png' }}">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ '/assets/images/favicons/favicon-32x32.png' }}">
    <link rel="icon" type="image/png" sizes="16x16" href="{{ '/assets/images/favicons/favicon-16x16.png' }}">
    <link rel="manifest" href="/site.webmanifest">

    <link rel="canonical" href="{{ site.canonical }}">
    <meta property="og:locale" content="{{ site.locale }}">
    <meta property="og:type" content="website">
    <meta property="og:title" content="{{ title }}">
    <meta property="og:description" content="{{ author.name }}, {{ author.title }}, {{ author.org }}">
    <meta property="og:url" content="{{ site.url }}">
    <meta property="og:site_name" content="{{ site.name }}">
    <meta property="og:image" content="{{ author.image }}">
    <meta property="og:image:width" content="192">
    <meta property="og:image:height" content="192">
    <meta property="og:image:type" content="image/webp">
    <meta content="All" name="audience">
    <meta content="index,follow" name="robots">
    <link rel="stylesheet" href="{{ '/assets/css/styles.css' | url }}">
  </head>
  <body class="antialiased text-emerald-950 bg-emerald-50 dark:bg-emerald-950 dark:text-emerald-50 leading-normal font-text text-front transition-color duration-200 ease-in-out" id="body">
    <div class="fixed top-4 right-4 z-50">
      <button id="theme-toggle" aria-label="Toggle dark mode" class="rounded-full p-2 bg-emerald-200 dark:bg-emerald-800 text-emerald-900 dark:text-emerald-100 shadow transition-colors duration-200">
        <span id="theme-toggle-icon">🌙</span>
      </button>
    </div>
    {% include "partials/_header.njk" %}
    <div class="md:max-w-screen-sm lg:max-w-screen-xl mx-auto px-4 flex flex-wrap pt-4 my-8">
      {% include "partials/_aside.njk" %}
      <main class="lg:w-2/3 lg:pl-8 xl:pl-12">
        {% include "partials/_intro.njk" %}
        {% include "partials/_skills.njk" %}
        {% include "partials/_about.njk" %}
        {% include "partials/_work.njk" %}
        {#% include "partials/_publication.njk" %#}
        {% include "partials/_certifications.njk" %}
        {% include "partials/_education.njk" %}
    </main>
    </div>
    {% include "partials/_footer.njk" %}
    {% include "partials/_schema_org.njk" %}
    <script>
      // Robust theme toggle logic: always override SSR/OS if user toggles
      (function() {
        const storageKey = 'theme-preference';
        const toggleBtn = document.getElementById('theme-toggle');
        const icon = document.getElementById('theme-toggle-icon');
        const darkQuery = window.matchMedia('(prefers-color-scheme: dark)');

        function setTheme(theme) {
          if (theme === 'dark') {
            document.documentElement.classList.add('dark');
            icon.textContent = '☀️';
          } else {
            document.documentElement.classList.remove('dark');
            icon.textContent = '🌙';
          }
        }

        function getStoredTheme() {
          return sessionStorage.getItem(storageKey);
        }

        function getPreferredTheme() {
          const stored = getStoredTheme();
          if (stored === 'light' || stored === 'dark') return stored;
          return darkQuery.matches ? 'dark' : 'light';
        }

        // Remove SSR/OS class if user has a preference
        function enforceStoredTheme() {
          const stored = getStoredTheme();
          if (stored === 'light' || stored === 'dark') {
            setTheme(stored);
          } else {
            setTheme(getPreferredTheme());
          }
        }

        // Initial theme
        enforceStoredTheme();

        // Listen for OS changes, but only update if user hasn't toggled
        darkQuery.addEventListener('change', () => {
          if (!getStoredTheme()) enforceStoredTheme();
        });

        // Toggle button
        toggleBtn.addEventListener('click', () => {
          const current = getPreferredTheme();
          const next = current === 'dark' ? 'light' : 'dark';
          sessionStorage.setItem(storageKey, next);
          setTheme(next);
        });

        // Always apply the stored theme on page load
        enforceStoredTheme();
      })();
    </script>
  </body>
</html>
